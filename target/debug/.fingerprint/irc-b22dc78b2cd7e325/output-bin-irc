{"message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/view/tui.rs","byte_start":0,"byte_end":5761,"line_start":1,"line_end":179,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod tui {","highlight_start":1,"highlight_end":14},{"text":"    use cursive::event;","highlight_start":1,"highlight_end":24},{"text":"    use cursive::traits::*;","highlight_start":1,"highlight_end":28},{"text":"    use cursive::views::{","highlight_start":1,"highlight_end":26},{"text":"        Button, Dialog, DummyView, EditView, LinearLayout, OnEventView, TextView,","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    use cursive::Cursive;","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn connect_to_server(s: &mut Cursive, command: &str) {","highlight_start":1,"highlight_end":59},{"text":"        s.pop_layer();","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match command {","highlight_start":1,"highlight_end":24},{"text":"            \"/connect\" => {","highlight_start":1,"highlight_end":28},{"text":"                login(s);","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _ => {","highlight_start":1,"highlight_end":19},{"text":"                s.add_layer(","highlight_start":1,"highlight_end":29},{"text":"                    Dialog::text(format!(\"Command {} not recognized\", command))","highlight_start":1,"highlight_end":80},{"text":"                        .button(\"[q]uit\", |s| s.quit()),","highlight_start":1,"highlight_end":57},{"text":"                );","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn login(s: &mut Cursive) {","highlight_start":1,"highlight_end":32},{"text":"        s.pop_layer();","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let name_input = LinearLayout::horizontal()","highlight_start":1,"highlight_end":52},{"text":"            .child(TextView::new(\"Name:\"))","highlight_start":1,"highlight_end":43},{"text":"            .child(EditView::new().with_name(\"name\").fixed_width(24));","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let password_input = LinearLayout::horizontal()","highlight_start":1,"highlight_end":56},{"text":"            .child(TextView::new(\"Password:\"))","highlight_start":1,"highlight_end":47},{"text":"            .child(EditView::new().with_name(\"password\").fixed_width(20));","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        //Using \"on_submit\" for either name_input or password_input","highlight_start":1,"highlight_end":68},{"text":"        //only extracts the name or password text, respectively.","highlight_start":1,"highlight_end":65},{"text":"        let login_wrapper = OnEventView::new(","highlight_start":1,"highlight_end":46},{"text":"            LinearLayout::vertical()","highlight_start":1,"highlight_end":37},{"text":"                .child(name_input)","highlight_start":1,"highlight_end":35},{"text":"                .child(password_input),","highlight_start":1,"highlight_end":40},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"        .on_event(event::Key::Enter, |s| {","highlight_start":1,"highlight_end":43},{"text":"            let name = s","highlight_start":1,"highlight_end":25},{"text":"                .call_on_name(\"name\", |view: &mut EditView| view.get_content())","highlight_start":1,"highlight_end":80},{"text":"                .unwrap();","highlight_start":1,"highlight_end":27},{"text":"            let password = s","highlight_start":1,"highlight_end":29},{"text":"                .call_on_name(\"password\", |view: &mut EditView| view.get_content())","highlight_start":1,"highlight_end":84},{"text":"                .unwrap();","highlight_start":1,"highlight_end":27},{"text":"            check_credentials(s, &name, &password)","highlight_start":1,"highlight_end":51},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let login_button = Button::new(\"login\", |s| {","highlight_start":1,"highlight_end":54},{"text":"            let name = s","highlight_start":1,"highlight_end":25},{"text":"                .call_on_name(\"name\", |view: &mut EditView| view.get_content())","highlight_start":1,"highlight_end":80},{"text":"                .unwrap();","highlight_start":1,"highlight_end":27},{"text":"            let password = s","highlight_start":1,"highlight_end":29},{"text":"                .call_on_name(\"password\", |view: &mut EditView| view.get_content())","highlight_start":1,"highlight_end":84},{"text":"                .unwrap();","highlight_start":1,"highlight_end":27},{"text":"            check_credentials(s, &name, &password)","highlight_start":1,"highlight_end":51},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let button_row = LinearLayout::horizontal()","highlight_start":1,"highlight_end":52},{"text":"            .child(login_button)","highlight_start":1,"highlight_end":33},{"text":"            .child(DummyView.fixed_width(2))","highlight_start":1,"highlight_end":45},{"text":"            .child(Button::new(\"[q]uit\", |s| s.quit()));","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        s.add_layer(","highlight_start":1,"highlight_end":21},{"text":"            Dialog::around(","highlight_start":1,"highlight_end":28},{"text":"                LinearLayout::vertical()","highlight_start":1,"highlight_end":41},{"text":"                    .child(DummyView.fixed_height(1))","highlight_start":1,"highlight_end":54},{"text":"                    .child(login_wrapper)","highlight_start":1,"highlight_end":42},{"text":"                    .child(DummyView.fixed_height(1))","highlight_start":1,"highlight_end":54},{"text":"                    .child(button_row),","highlight_start":1,"highlight_end":40},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"            .title(\"Login\"),","highlight_start":1,"highlight_end":29},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn check_credentials(s: &mut Cursive, name: &str, password: &str) {","highlight_start":1,"highlight_end":72},{"text":"        s.pop_layer();","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let is_correct = verify(name, password);","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if is_correct {","highlight_start":1,"highlight_end":24},{"text":"            select_channel(s, name);","highlight_start":1,"highlight_end":37},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            s.add_layer(Dialog::text(\"Incorrect username or password\"));","highlight_start":1,"highlight_end":73},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn verify(name: &str, password: &str) -> bool {","highlight_start":1,"highlight_end":52},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn select_channel(s: &mut Cursive, name: &str) {","highlight_start":1,"highlight_end":53},{"text":"        s.pop_layer();","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        //let name_copy = name.clone();","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let channel_input = LinearLayout::horizontal()","highlight_start":1,"highlight_end":55},{"text":"            .child(TextView::new(\"Channel name:\"))","highlight_start":1,"highlight_end":51},{"text":"            .child(EditView::new().with_name(\"channel_name\").fixed_width(24));","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let connect_button = Button::new(\"Connect\", |s| {","highlight_start":1,"highlight_end":58},{"text":"            let channel = s","highlight_start":1,"highlight_end":28},{"text":"                .call_on_name(\"connect_input\", |view: &mut EditView| view.get_content())","highlight_start":1,"highlight_end":89},{"text":"                .unwrap();","highlight_start":1,"highlight_end":27},{"text":"            //open_chat(s, &channel, &name)","highlight_start":1,"highlight_end":44},{"text":"            open_chat(s, &channel);","highlight_start":1,"highlight_end":36},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let button_row = LinearLayout::horizontal()","highlight_start":1,"highlight_end":52},{"text":"            .child(connect_button)","highlight_start":1,"highlight_end":35},{"text":"            .child(DummyView.fixed_width(2))","highlight_start":1,"highlight_end":45},{"text":"            .child(Button::new(\"[q]uit\", |s| s.quit()));","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        s.add_layer(","highlight_start":1,"highlight_end":21},{"text":"            Dialog::around(","highlight_start":1,"highlight_end":28},{"text":"                LinearLayout::vertical()","highlight_start":1,"highlight_end":41},{"text":"                    .child(DummyView.fixed_height(1))","highlight_start":1,"highlight_end":54},{"text":"                    .child(channel_input)","highlight_start":1,"highlight_end":42},{"text":"                    .child(button_row),","highlight_start":1,"highlight_end":40},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"            .title(\"Connect to a channel\"),","highlight_start":1,"highlight_end":44},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //    fn open_chat(s: &mut Cursive, channel: &str, name: &str) {","highlight_start":1,"highlight_end":69},{"text":"    fn open_chat(s: &mut Cursive, channel: &str) {","highlight_start":1,"highlight_end":51},{"text":"        s.pop_layer();","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        s.add_layer(","highlight_start":1,"highlight_end":21},{"text":"            Dialog::around(","highlight_start":1,"highlight_end":28},{"text":"                LinearLayout::vertical()","highlight_start":1,"highlight_end":41},{"text":"                    .child(DummyView.fixed_height(1))","highlight_start":1,"highlight_end":54},{"text":"                    .child(TextView::new(format!(\"Hello\"))),","highlight_start":1,"highlight_end":61},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"            .title(\"Connect to a channel\"),","highlight_start":1,"highlight_end":44},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn start_client() {","highlight_start":1,"highlight_end":28},{"text":"        let mut siv = cursive::default();","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let connect_button = Button::new(\"connect\", |s| {","highlight_start":1,"highlight_end":58},{"text":"            let command = s","highlight_start":1,"highlight_end":28},{"text":"                .call_on_name(\"connect_input\", |view: &mut EditView| view.get_content())","highlight_start":1,"highlight_end":89},{"text":"                .unwrap();","highlight_start":1,"highlight_end":27},{"text":"            connect_to_server(s, &command)","highlight_start":1,"highlight_end":43},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let button_row = LinearLayout::horizontal()","highlight_start":1,"highlight_end":52},{"text":"            .child(connect_button)","highlight_start":1,"highlight_end":35},{"text":"            .child(DummyView.fixed_width(2))","highlight_start":1,"highlight_end":45},{"text":"            .child(Button::new(\"[q]uit\", |s| s.quit()));","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        siv.add_layer(","highlight_start":1,"highlight_end":23},{"text":"            Dialog::around(","highlight_start":1,"highlight_end":28},{"text":"                LinearLayout::vertical()","highlight_start":1,"highlight_end":41},{"text":"                    .child(DummyView.fixed_height(1))","highlight_start":1,"highlight_end":54},{"text":"                    .child(TextView::new(\"Type '/connect' to connect to the server:\"))","highlight_start":1,"highlight_end":87},{"text":"                    .child(","highlight_start":1,"highlight_end":28},{"text":"                        EditView::new()","highlight_start":1,"highlight_end":40},{"text":"                            .on_submit(connect_to_server)","highlight_start":1,"highlight_end":58},{"text":"                            .with_name(\"connect_input\")","highlight_start":1,"highlight_end":56},{"text":"                            .fixed_width(28),","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                    .child(DummyView.fixed_height(1))","highlight_start":1,"highlight_end":54},{"text":"                    .child(button_row),","highlight_start":1,"highlight_end":40},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"            .title(\"Welcome\"),","highlight_start":1,"highlight_end":31},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        siv.add_global_callback('q', |s| s.quit());","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        siv.run();","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::module_inception)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/view/tui.rs:1:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod tui {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use cursive::event;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use cursive::traits::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use cursive::views::{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::module_inception)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"message":"unused variable: `name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/view/tui.rs","byte_start":2947,"byte_end":2951,"line_start":92,"line_end":92,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    fn verify(name: &str, password: &str) -> bool {","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/view/tui.rs","byte_start":2947,"byte_end":2951,"line_start":92,"line_end":92,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    fn verify(name: &str, password: &str) -> bool {","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"_name","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `name`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/view/tui.rs:92:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn verify(name: &str, password: &str) -> bool {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_name`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `password`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/view/tui.rs","byte_start":2959,"byte_end":2967,"line_start":92,"line_end":92,"column_start":27,"column_end":35,"is_primary":true,"text":[{"text":"    fn verify(name: &str, password: &str) -> bool {","highlight_start":27,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/view/tui.rs","byte_start":2959,"byte_end":2967,"line_start":92,"line_end":92,"column_start":27,"column_end":35,"is_primary":true,"text":[{"text":"    fn verify(name: &str, password: &str) -> bool {","highlight_start":27,"highlight_end":35}],"label":null,"suggested_replacement":"_password","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `password`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/view/tui.rs:92:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn verify(name: &str, password: &str) -> bool {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_password`\u001b[0m\n\n"}
{"message":"unused variable: `name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/view/tui.rs","byte_start":3052,"byte_end":3056,"line_start":96,"line_end":96,"column_start":40,"column_end":44,"is_primary":true,"text":[{"text":"    fn select_channel(s: &mut Cursive, name: &str) {","highlight_start":40,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/view/tui.rs","byte_start":3052,"byte_end":3056,"line_start":96,"line_end":96,"column_start":40,"column_end":44,"is_primary":true,"text":[{"text":"    fn select_channel(s: &mut Cursive, name: &str) {","highlight_start":40,"highlight_end":44}],"label":null,"suggested_replacement":"_name","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `name`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/view/tui.rs:96:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn select_channel(s: &mut Cursive, name: &str) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_name`\u001b[0m\n\n"}
{"message":"unused variable: `channel`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/view/tui.rs","byte_start":4207,"byte_end":4214,"line_start":130,"line_end":130,"column_start":35,"column_end":42,"is_primary":true,"text":[{"text":"    fn open_chat(s: &mut Cursive, channel: &str) {","highlight_start":35,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/view/tui.rs","byte_start":4207,"byte_end":4214,"line_start":130,"line_end":130,"column_start":35,"column_end":42,"is_primary":true,"text":[{"text":"    fn open_chat(s: &mut Cursive, channel: &str) {","highlight_start":35,"highlight_end":42}],"label":null,"suggested_replacement":"_channel","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `channel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/view/tui.rs:130:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn open_chat(s: &mut Cursive, channel: &str) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_channel`\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"src/view/tui.rs","byte_start":2993,"byte_end":3005,"line_start":93,"line_end":93,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        return true;","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::needless_return)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"src/view/tui.rs","byte_start":2993,"byte_end":3005,"line_start":93,"line_end":93,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        return true;","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":"true","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/view/tui.rs:93:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return true;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `true`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_return)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"useless use of `format!`","code":{"code":"clippy::useless_format","explanation":null},"level":"warning","spans":[{"file_name":"src/view/tui.rs","byte_start":4433,"byte_end":4449,"line_start":137,"line_end":137,"column_start":42,"column_end":58,"is_primary":true,"text":[{"text":"                    .child(TextView::new(format!(\"Hello\"))),","highlight_start":42,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::useless_format)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `.to_string()`","code":null,"level":"help","spans":[{"file_name":"src/view/tui.rs","byte_start":4433,"byte_end":4449,"line_start":137,"line_end":137,"column_start":42,"column_end":58,"is_primary":true,"text":[{"text":"                    .child(TextView::new(format!(\"Hello\"))),","highlight_start":42,"highlight_end":58}],"label":null,"suggested_replacement":"\"Hello\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: useless use of `format!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/view/tui.rs:137:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    .child(TextView::new(format!(\"Hello\"))),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using `.to_string()`: `\"Hello\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::useless_format)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format\u001b[0m\n\n"}
{"message":"7 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 7 warnings emitted\u001b[0m\n\n"}
